Module Maze_Info
    Sub InitialiseScreen()
        Console.BackgroundColor = ConsoleColor.Black
        Console.Clear()
        Console.ForegroundColor = ConsoleColor.White
    End Sub
    Sub RecrusiveBacktrackerINFO()
        Console.WriteLine("Steps in generating a maze using the recursive backtracker algorithm:")
        Console.WriteLine("     1. Choose a random starting cell from the grid")
        Console.WriteLine("     2. Randomly carve a passage to an adjacent cell, but only if it hasn't already been visited")
        Console.WriteLine("     3. This cell now becomes the starting cell")
        Console.WriteLine("     4. If there are no unvisited adjacent cells then go back on the path until an unvisited adjacent cell is found")
        Console.WriteLine("     5. The algorithm ends when there are no more unvisited cells on the grid")
        Console.WriteLine($"{Environment.NewLine}Recursive Backtracker algorithm:")
        Console.WriteLine("     1. Pick a random starting cell from the grid, make that the current cell and mark it as visited")
        Console.WriteLine("     2. While there are unvisited cells")
        Console.WriteLine("         1. If the current cell has unvisited neighbours")
        Console.WriteLine("             1. Randomly choose one of the unvisited neighbours")
        Console.WriteLine("             2. Carve a path to the unvisited neighbour from the current cell")
        Console.WriteLine("             3. The chosen neighbour now becomes the current cell")
        Console.WriteLine("             4. Push the current cell to the stack")
        Console.WriteLine("             5. Mark the current cell as visited")
        Console.WriteLine("         2. If the stack isn't empty")
        Console.WriteLine("             1. Pop a cell from the stack")
        Console.WriteLine("             2. Make it the current cell")
    End Sub
    Sub RecrusiveBacktrackerRecursionINFO()
        Console.WriteLine("The recursive implementation of the Recursive Backtracker algortihm is very similar to the iterative version")
        Console.WriteLine($"{Environment.NewLine}Steps in generating a maze using the Recursive Backtracker Algorithm:")
        Console.WriteLine("     1. Choose a random starting cell from the grid")
        Console.WriteLine("     2. Randomly carve a passage to an adjacent cell, but only if it hasn't already been visited")
        Console.WriteLine("     3. This cell now becomes the starting cell")
        Console.WriteLine("     4. If there are no unvisited adjacent cells then go back on the path until an unvisited adjacent cell is found")
        Console.WriteLine("     5. The algorithm ends when there are no more unvisited cells on the grid")
        Console.WriteLine($"{Environment.NewLine}Recursive Backtracker Algorithm:")
        Console.WriteLine("     1. Pick a random starting cell from the grid, make that the current cell and mark it as visited")
        Console.WriteLine("     2. Call the function with the inputs being")
        Console.WriteLine("         1. The current cell")
        Console.WriteLine("         2. The boarders of the grid")
        Console.WriteLine("         3. The state of each cell on the grid (visited/unvisited)")
        Console.WriteLine("         4. The previous cell (a stack is no longer needed)")
        Console.WriteLine("     3. If there is an unvisited adjacent neighour available")
        Console.WriteLine("         1. Carve a path between the current cell and the unvisited adjacent neighbour")
        Console.WriteLine("         2. Make the previous cell the current cell")
        Console.WriteLine("         3. Recursively call the function with the current cell being the unvisited adjacent neighbour")
        Console.WriteLine("     4. If there aren't any unvisited adjacent neighbours")
        Console.WriteLine("         1. Return nothing")
        Console.WriteLine("     5. Make the previous cell the current cell")
        Console.WriteLine("     6. Recursively call the function")
    End Sub
End Module
