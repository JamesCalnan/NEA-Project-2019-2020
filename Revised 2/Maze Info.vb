Module Maze_Info
    Sub InitialiseScreen()
        Console.BackgroundColor = ConsoleColor.Black
        Console.Clear()
        Console.ForegroundColor = ConsoleColor.White
    End Sub
    Sub RecrusiveBacktrackerINFO()
        Console.WriteLine("Steps in generating a maze using the recursive backtracker algorithm:")
        Console.WriteLine("     1. Choose a random starting cell from the grid, this becomes the current cell")
        Console.WriteLine("     2. Randomly carve a passage to an adjacent cell, but only if it hasn't already been visited")
        Console.WriteLine("     3. This cell now becomes the current cell")
        Console.WriteLine("     4. If there are no unvisited adjacent cells then go back on the path until an unvisited adjacent cell is found")
        Console.WriteLine("     5. The algorithm ends when there are no more unvisited cells on the grid")
        Console.WriteLine($"{Environment.NewLine}Recursive Backtracker algorithm:")
        Console.WriteLine("     1. Pick a random starting cell from the grid, make that the current cell and mark it as visited")
        Console.WriteLine("     2. While there are unvisited cells")
        Console.WriteLine("         1. If the current cell has unvisited neighbours")
        Console.WriteLine("             1. Randomly choose one of the unvisited neighbours")
        Console.WriteLine("             2. Carve a path to the unvisited neighbour from the current cell")
        Console.WriteLine("             3. The chosen neighbour now becomes the current cell")
        Console.WriteLine("             4. Push the current cell to the stack")
        Console.WriteLine("             5. Mark the current cell as visited")
        Console.WriteLine("         2. If the stack isn't empty")
        Console.WriteLine("             1. Pop a cell from the stack")
        Console.WriteLine("             2. Make it the current cell")
    End Sub
    Sub RecrusiveBacktrackerRecursionINFO()
        Console.WriteLine("The recursive implementation of the Recursive Backtracker algortihm is very similar to the iterative version")
        Console.WriteLine($"{Environment.NewLine}Steps in generating a maze using the Recursive Backtracker Algorithm:")
        Console.WriteLine("     1. Choose a random starting cell from the grid, this becomes the current cell")
        Console.WriteLine("     2. Randomly carve a passage to an adjacent cell, but only if it hasn't already been visited")
        Console.WriteLine("     3. This cell now becomes the current cell")
        Console.WriteLine("     4. If there are no unvisited adjacent cells then go back on the path until an unvisited adjacent cell is found")
        Console.WriteLine("     5. The algorithm ends when there are no more unvisited cells on the grid")
        Console.WriteLine($"{Environment.NewLine}Recursive Backtracker Algorithm:")
        Console.WriteLine("     1. Pick a random starting cell from the grid, make that the current cell and mark it as visited")
        Console.WriteLine("     2. Call the function with the inputs being")
        Console.WriteLine("         1. The current cell")
        Console.WriteLine("         2. The boarders of the grid")
        Console.WriteLine("         3. The state of each cell on the grid (visited/unvisited)")
        Console.WriteLine("         4. The previous cell (a stack is no longer needed)")
        Console.WriteLine("     3. If there is an unvisited adjacent neighour available")
        Console.WriteLine("         1. Carve a path between the current cell and the unvisited adjacent neighbour")
        Console.WriteLine("         2. Make the previous cell the current cell")
        Console.WriteLine("         3. Recursively call the function with the current cell being the unvisited adjacent neighbour")
        Console.WriteLine("     4. If there aren't any unvisited adjacent neighbours")
        Console.WriteLine("         1. Return nothing")
        Console.WriteLine("     5. Make the previous cell the current cell")
        Console.WriteLine("     6. Recursively call the function")
    End Sub
    Sub Prims_SimplifiedINFO()
        Console.WriteLine("The simplified version of Prim's Algorithm for maze generation is basically the same as true Prims algorithm however")
        Console.WriteLine("It assumes the weight of each edge in the grid is the same and therefore chooses a random edge instead of the edge with the lowest weight")
        Console.WriteLine($"{Environment.NewLine}Steps in generating a maze using the Prims algorithm (simplified):")
        Console.WriteLine("     1. Choose a random starting cell, and put it into a set (we'll call it V)")
        Console.WriteLine("     2. Choose an edge with the smallest weight from the grid that connects a cell in V that is not in V")
        Console.WriteLine("     3. Carve a path between the cell that is in V and isn't in V")
        Console.WriteLine("     4. Add the new cell to V")
        Console.WriteLine("     5. Repeat steps 2 to 4")
        Console.WriteLine("     6. the algorithm ends when every cell is in V")
        Console.WriteLine($"{Environment.NewLine}Prim's Algorithm (simplified):")
        Console.WriteLine("     1. Initilise a frontier set")
        Console.WriteLine("     2. Initialise a visited set")
        Console.WriteLine("     3. While the frontier set is not empty")
        Console.WriteLine("         1. Add all of the unvisited adjacent cells of the current cell to the frontier set")
        Console.WriteLine("         2. Make the current cell a random cell from the frontier set")
        Console.WriteLine("         3. Create an adjacency list of the adjacent cells of the current cell that are in the visited set")
        Console.WriteLine("         4. Randomly pick a cell from this adjacency list")
        Console.WriteLine("         5. Carve a path between these two cells")
        Console.WriteLine("         6. Remove this cell from the frontier set")
        Console.WriteLine("         7. Add this cell to the visited set")
    End Sub
    Sub Prims_TrueINFO()
        Console.WriteLine("The true version of Prim's Algorithm for maze generation is basically the same as the simplified Prims algorithm however")
        Console.WriteLine("Assigns each edge a random weight between 0, 99, it then chooses the cell with the lowest weight out of the frontier set")
        Console.WriteLine($"{Environment.NewLine}Steps in generating a maze using the Prims algorithm (simplified):")
        Console.WriteLine("     1. Choose a random starting cell, and put it into a set (we'll call it V)")
        Console.WriteLine("     2. Choose an edge with the smallest weight from the grid that connects a cell in V that is not in V")
        Console.WriteLine("     3. Carve a path between the cell that is in V and isn't in V")
        Console.WriteLine("     4. Add the new cell to V")
        Console.WriteLine("     5. Repeat steps 2 to 4")
        Console.WriteLine("     6. the algorithm ends when every cell is in V")
        Console.WriteLine($"{Environment.NewLine}Prim's Algorithm (simplified):")
        Console.WriteLine("     1. Initilise a frontier set")
        Console.WriteLine("     2. Initialise a visited set")
        Console.WriteLine("     3. Initialise a dictionary of a cell and an integer")
        Console.WriteLine("     3. While the frontier set is not empty")
        Console.WriteLine("         1. Add all of the unvisited adjacent cells of the current cell to the frontier set")
        Console.WriteLine("         2. Loop through the frontier set")
        Console.WriteLine("             1. Pick the edge with the lowest weight")
        Console.WriteLine("         3. Create an adjacency list of the adjacent cells of the current cell that are in the visited set")
        Console.WriteLine("         4. Randomly pick a cell from this adjacency list")
        Console.WriteLine("         5. Carve a path between these two cells")
        Console.WriteLine("         6. Remove this cell from the frontier set")
        Console.WriteLine("         7. Add this cell to the visited set")
    End Sub
    Sub HuntAndKillINFO()
        Console.WriteLine("Steps in generating a maze using the Hunt and Kill Algorithm:")
        Console.WriteLine("     1. Choose a random starting cell")
        Console.WriteLine("     2. Randomly carve to an unvisited adjacent neighbour, until there aren't any unvisited neighbours available")
        Console.WriteLine("     3. When there aren't any unvisited neighbours available enter hunt mode")
        Console.WriteLine("         1. Scan the grid for a cell that is adjacent to a visited cell")
        Console.WriteLine("         2. Make this the current cell")
        Console.WriteLine("     4. Repeat steps 2 and 3 until the scaning reveals that there aren't any unvisited cells available")
        Console.WriteLine($"{Environment.NewLine}Hunt and Kill Algorithm:")
        Console.WriteLine("     1. Pick a random starting cell from the grid, make that the current cell and mark it as visited")
        Console.WriteLine("     2. While there are unvisited cells")
        Console.WriteLine("         1. If there is an unvisited adjacent cell available")
        Console.WriteLine("             1. Pick a random cell from the available adjacent cells")
        Console.WriteLine("             2. Carve a path between this cell and the current cell")
        Console.WriteLine("             3. Make the chosen adjacent cell the current cell")
        Console.WriteLine("             4. Mark the current cell as visited")
        Console.WriteLine("         2. Else")
        Console.WriteLine("             1. Scan the grid (top to bottom, left to right)")
        Console.WriteLine("             2. If there is a cell that is adjacent to the visited cells")
        Console.WriteLine("                 1. Make it the current cell")
        Console.WriteLine("                 2. Create an adjacency list for the current cell")
        Console.WriteLine("                 3. Pick a random visited adjacent cell")
        Console.WriteLine("                 4. Carve a path between the current cell and chosen adjacent cell")
        Console.WriteLine("                 6. Mark the current cell as visited")
        Console.WriteLine("             3. Else")
        Console.WriteLine("                 The maze is finished being generated")
    End Sub
    Sub AldousBroderINFO()
        Console.WriteLine("Steps in generating a maze using the Aldous-Broder Algorithm:")
        Console.WriteLine("     1. Choose a random starting cell")
        Console.WriteLine("     2. Randomly pick an adjacent cell")
        Console.WriteLine("     3. If it is unvisited then carve a path")
        Console.WriteLine("     4. When there are no unvisited cells the maze is finished being generated")
        Console.WriteLine($"{Environment.NewLine}Aldous-Broder Algorithm:")
        Console.WriteLine("     1. Pick a random starting cell from the grid, make that the current cell and mark it as visited")
        Console.WriteLine("     2. While there are unvisited cells")
        Console.WriteLine("         1. Pick a random adjacent neighbour of the current cell")
        Console.WriteLine("         2. If the chosen neighbour is unvisited")
        Console.WriteLine("             1. Carve a path to the chosen neighbour")
        Console.WriteLine("         3. Make the chosen neighbour the current cell")
    End Sub
    Sub GrowingTreeINFO()
        Console.WriteLine("Steps in generating a maze using the Growing Tree Algorithm:")
        Console.WriteLine("     1. Let C be a list of cells")
        Console.WriteLine("     2. Add a random starting cell to C")
        Console.WriteLine("     3. Choose a cell from C and carve a path tp any unvisited neighbours")
        Console.WriteLine("     4. Add the chosen neighbour to C, if there are no unvisited neighbours remove the cell from C")
        Console.WriteLine("     5. Repeat steps 3 and 4 until C is empty")
        Console.WriteLine($"{Environment.NewLine}Growing Tree Algorithm:")
        Console.WriteLine("     1. Pick a random starting cell from the grid, make that the current cell and mark it as visited")
        Console.WriteLine("     2. While there are unvisited cells")
        Console.WriteLine("         1. Pick a cell from C according to the cell selection method that has been chosen")
        Console.WriteLine("         2. Make the chosen cell the current cell")
        Console.WriteLine("         3. Create an adjacency list of the current cell")
        Console.WriteLine("         4. Carve a path from a random cell in the adjacency list to the current cell")
        Console.WriteLine("         5. Mark the current cell as visited")
        Console.WriteLine("         6. Remove the current cell from C")
    End Sub
    Sub SidewinderINFO()

    End Sub
    Sub BinaryTreeINFO()

    End Sub
    Sub WilsonsINFO()

    End Sub
    Sub EllersINFO()

    End Sub
    Sub KruskalsINFO()

    End Sub
    Sub HoustonsINFO()

    End Sub
    Sub SpiralBacktrackerINFO()

    End Sub
    Sub CustomAlgorithmINFO()

    End Sub
End Module
